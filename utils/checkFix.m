function fix_fcd = checkFix(el, FIX_CHECK)	% FUNCTION fix_fcd = checkFix% performs fixation check% adapted from Antje Nuthmann% problem: trial can be elicited by a blink% therefore, we require that the fixspot is fixated% for at least 'nr_samples' subsequent samples (= 'const.FIX_CHECK_DUR' ms)% % we check for 'const.FIX_CHECK_TIMEOUT' ms% global visual const el % [centerx, centery]=RectCenter(visual.rect);% fixrect=drawcaltarget(el, centerx, centery); % scene viewing, search% fixrect=drawcaltarget(el, const.OFFSET, centery);	% readingtstart=GetSecs;fix = 0;	fix_fcd = 0;t=tstart;col_fix = [];% constantsFIX_CHECK_DUR = 200;SAMPLING = 1000;FIX_CHECK_TIMEOUT = 500;nr_samples = FIX_CHECK_DUR/(1000/SAMPLING);while (fix_fcd~=1 && (t-tstart) < FIX_CHECK_TIMEOUT/1000)		if length(col_fix) > nr_samples-1			col_fix = col_fix(end-(nr_samples-2):end);	end	fix=checkFixation1(el, FIX_CHECK);	t=GetSecs;	col_fix = [col_fix; fix];		if sum(col_fix)==nr_samples				fix_fcd = 1;	endendfunction fixated=checkFixation1(el, targets)% checks for fixation of rect specified in targets, which may be a single rect% returns whether rect was fixated (1 if true, 0 otherwise)% el contains the eyetracking globals, set up by initeyelinkdefaults % parameters: % 	el:		 	Eyelink globals % return value: %	fixated:	1 if rect was fixated, 0 otherwisepersistent eye_usedfixated=0;%eye_used = el.BINOCULAR;if isempty(eye_used) || eye_used==-1    eye_used = Eyelink( 'eyeavailable');  % find which eye    switch eye_used        % select eye, add annotation        case el.RIGHT_EYE % 1            Eyelink('message', 'EYE_USED 1 RIGHT');        case el.BINOCULAR % 2            eye_used = el.RIGHT_EYE;            Eyelink('message', 'EYE_USED 1 RIGHT');        case el.LEFT_EYE % 0            Eyelink('message', 'EYE_USED 0 LEFT');    endend% Real-time GAZE display code 	if Eyelink('isconnected') == el.dummyconnected	sample=1;		else	sample=0;	t1=GetSecs;	while (GetSecs-t1<.1 && sample<1) % hier war t1-getsecs		sample=Eyelink( 'newfloatsampleavailable'); % eyelink_newest_float_sample(NULL) check for new sample update	endendif sample> 0	if Eyelink('isconnected') == el.dummyconnected		evt=[];		eye_used = 0;	else		evt = Eyelink( 'newestfloatsample'); % eyelink_newest_float_sample(&evt);  % get the sample */	end	%evt	if eye_used ~= -1   % do we know which eye yet? */		if Eyelink('isconnected') == el.dummyconnected							[x,y,button] = GetMouse(el.window); % get gaze position from mouse			pupil=1;		else            if Eyelink('eyeavailable')==el.BINOCULAR % binocular recordings                % use average gaze position across the two eyes                xleft = evt.gx(el.LEFT_EYE+1);                xright = evt.gx(el.RIGHT_EYE+1);                x = (xleft+xright)/2;                yleft = evt.gy(el.LEFT_EYE+1);                yright = evt.gy(el.RIGHT_EYE+1);                y = (yleft+yright)/2;            else % monocular recordings                % for tracked eye, get horizontal gaze position from sample                x = evt.gx(eye_used+1); % +1 as we're accessing MATLAB array                % for tracked eye, get vertical gaze position from sample                 y = evt.gy(eye_used+1);             end			pupil=evt.pa(eye_used+1);		end			if x~=el.MISSING_DATA && y~=el.MISSING_DATA && pupil>0  % pupil visisible?			for i=1:min(size(targets))				check=targets(i,:);				if x>check(RectLeft) && x <check(RectRight) && y > check(RectTop) && y<check(RectBottom)					fixated=1;					return;				else					fixated=0;				end								end		else 			fixated=-2; %no x or y data		end % if x~=MISSING_DATA	end % eye_used== -1else % sample< 0	fixated=-1;end % sample> 0